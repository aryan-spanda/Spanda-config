# Reusable Platform CI/CD Workflow - NO AUTOMATIC HELM CHART GENERATION
# This workflow ONLY builds images and updates ArgoCD Application references
# Helm charts are manually maintained in application repositories

name: Reusable Platform CI/CD

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Name of the application (used for file paths and ArgoCD app names)'
        required: true
        type: string
      docker_image_name:
        description: 'Docker image name (e.g., myorg/myapp)'
        required: true
        type: string
      config_repo:
        description: 'Configuration repository name'
        required: false
        type: string
        default: 'aryan-spanda/config-repo'
      target_branch:
        description: 'Target branch for deployment'
        required: false
        type: string
        default: 'main'
      node_version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '18'
      dockerfile_path:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: './Dockerfile'
      docker_context:
        description: 'Docker build context'
        required: false
        type: string
        default: '.'
    secrets:
      DOCKERHUB_USERNAME:
        description: 'Docker Hub username'
        required: true
      DOCKERHUB_TOKEN:
        description: 'Docker Hub access token'
        required: true
      GITOPS_PAT:
        description: 'Personal Access Token for GitOps config repository'
        required: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ inputs.docker_image_name }}
  CONFIG_REPO: ${{ inputs.config_repo }}
  TARGET_BRANCH: ${{ inputs.target_branch }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout application code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        if [ -f "package.json" ]; then
          # Check if it's a workspace (monorepo)
          if grep -q '"workspaces"' package.json; then
            npm run install:all || npm install
          else
            npm ci
          fi
        else
          echo "No package.json found, skipping npm install"
        fi

    - name: Run tests
      run: npm test
      continue-on-error: false

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.vars.outputs.short-sha }}
      image-tag: ${{ steps.vars.outputs.image-tag }}

    steps:
    - name: Checkout application code
      uses: actions/checkout@v4

    - name: Set up variables
      id: vars
      run: |
        SHORT_SHA=${GITHUB_SHA::8}
        echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "image-tag=${SHORT_SHA}" >> $GITHUB_OUTPUT

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.docker_context }}
        file: ${{ inputs.dockerfile_path }}
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.short-sha }}
          ${{ env.IMAGE_NAME }}:latest

  update-gitops-config:
    name: Update GitOps Configuration
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout config repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.CONFIG_REPO }}
        token: ${{ secrets.GITOPS_PAT }}
        ref: ${{ env.TARGET_BRANCH }}

    - name: Update ArgoCD Application image references
      run: |
        NEW_TAG="${{ needs.build-and-push.outputs.short-sha }}"
        APP_NAME="${{ inputs.app_name }}"
        
        echo "Updating ArgoCD Applications for app: ${APP_NAME}"
        echo "New image tag: ${NEW_TAG}"
        echo "Image: ${{ env.IMAGE_NAME }}:${NEW_TAG}"
        
        # Update ArgoCD Application manifests that reference the image
        find applications/${APP_NAME}/argocd/ -name "*.yaml" -type f 2>/dev/null | while read file; do
          if [ -f "$file" ]; then
            echo "Found ArgoCD Application: $file"
            # Update git ref to use the new commit if needed (optional)
            if grep -q "targetRevision:" "$file"; then
              echo "  - Application points to app repository (no changes needed)"
            fi
          fi
        done
        
        echo ""
        echo "‚úÖ ArgoCD Applications point to application repository charts"
        echo "‚úÖ Application repository manages its own Helm values"
        echo "‚úÖ Image updates happen in the application repository via separate workflow"

    - name: Commit changes (if any)
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        if git diff --quiet; then
          echo "‚úÖ No changes to commit - ArgoCD applications are up to date"
          echo "üìù Note: Image updates are managed in the application repository"
          exit 0
        fi
        
        NEW_TAG="${{ needs.build-and-push.outputs.short-sha }}"
        APP_NAME="${{ inputs.app_name }}"
        
        git add .
        git commit -m "ÔøΩ Update ${APP_NAME} config repository metadata

        Application: ${APP_NAME}
        Image Built: ${{ env.IMAGE_NAME }}:${NEW_TAG}
        Commit: ${GITHUB_SHA}
        
        Note: Helm values are managed in application repository
        ArgoCD will sync from: https://github.com/aryan-spanda/${APP_NAME}.git
        
        Updated by: ${GITHUB_ACTOR}
        Workflow: ${GITHUB_WORKFLOW}
        Run: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
        
        git push origin ${{ env.TARGET_BRANCH }}

  security-scan:
    name: Security Scan
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout application code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.short-sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        scanners: 'vuln'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  notify-deployment:
    name: Deployment Notification
    needs: [build-and-push, update-gitops-config, security-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Deployment notification
      run: |
        APP_NAME="${{ inputs.app_name }}"
        IMAGE_TAG="${{ needs.build-and-push.outputs.short-sha }}"
        
        if [ "${{ needs.update-gitops-config.result }}" == "success" ] && [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "‚úÖ Successfully completed CI/CD pipeline for ${APP_NAME}!"
          echo ""
          echo "üê≥ Image Built: ${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          echo "ÔøΩ Security scan: Passed"
          echo "üìã Config repo: Updated (if needed)"
          echo ""
          echo "üìù Next Steps:"
          echo "  1. Update Helm values in your application repository"
          echo "  2. ArgoCD will automatically sync from app repository"
          echo "  3. Monitor deployment in ArgoCD dashboard"
          echo ""
          echo "üéØ GitOps Flow:"
          echo "  App Repo (Helm Charts) ‚Üí ArgoCD ‚Üí Kubernetes"
        else
          echo "‚ùå Pipeline failed for ${APP_NAME}. Check logs for details:"
          echo "  - Build & Push: ${{ needs.build-and-push.result }}"
          echo "  - GitOps Config: ${{ needs.update-gitops-config.result }}"
          echo "  - Security Scan: ${{ needs.security-scan.result }}"
          exit 1
        fi
