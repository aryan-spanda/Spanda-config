# =============================================================================
# SPANDA AI PLATFORM - TENANT CONFIGURATION
# =============================================================================
# This is the master list of all tenants on the Spanda AI Platform.
# To add a new tenant, simply add their configuration here and run:
# ./scripts/onboard-tenants.sh
# =============================================================================

# TODO -ADD GPU QUOTA âœ… DONE
tenants:
  # Test Application Tenant (new version to avoid namespace conflict)
  - name: "test-application-2" # namespace name
    git_org: "aryan-spanda"
    description: "New test application tenant for testing the factory"
    cpu_quota: "30"
    memory_quota: "60Gi"
    storage_quota: "150Gi"
    gpu_quota: "0"
    environments: ["dev", "staging", "production"]
    modules:
      - name: "traditional-bi-baremetal"
        version: "1.0.0"
        description: "Traditional BI stack (PostgreSQL, MySQL, Superset)"
        values:
          superset:
            admin_user: "test-app-admin"
            custom_config: "test-application-specific"
      # Temporarily disable security-vault to focus on new modules
      # - name: "security-vault"
      #   version: "1.2.0"
      #   description: "HashiCorp Vault secret management"
      # Temporarily disable monitoring-prometheus due to timeout issues  
      # - name: "monitoring-prometheus"
      #   version: "1.1.0"
      #   description: "Prometheus monitoring stack with Grafana"
      - name: "realtime-bi-baremetal"
        version: "1.0.0"
        description: "Real-time BI analytics with ClickHouse"
        values:
          clickhouse:
            cluster_name: "test-app-cluster"
            # Use ClusterIP services instead of NodePort to avoid conflicts
            service:
              type: "ClusterIP"
            users:
              - name: "test_app_user"
                password: "test_secure_123"
                networks: ["0.0.0.0/0"]
            databases:
              - "test_app_analytics"
              - "test_app_metrics"
          superset:
            # Fix storage size to meet 1Gi minimum requirement
            persistence:
              size: "2Gi"
            service:
              type: "ClusterIP"
          kafka:
            cluster_id: "test-app-kafka"
            topics:
              - name: "test-app-events"
                partitions: 3
                replication_factor: 1
              - name: "test-app-metrics"
                partitions: 2
                replication_factor: 1
          spark:
            executor_memory: "2g"
            driver_memory: "1g"
            executor_cores: 2
      - name: "data-lake-baremetal"
        version: "1.0.0"
        description: "Data lake infrastructure with MinIO and Kafka"
        values:
          minio:
            # Use ClusterIP service to avoid NodePort conflicts
            service:
              type: "ClusterIP"
            access_key: "test-app-minio-key"
            secret_key: "test-app-minio-secret-key-2024"
            buckets:
              - name: "test-app-raw-data"
                policy: "private"
              - name: "test-app-processed-data"
                policy: "private"
              - name: "test-app-backup"
                policy: "private"
            # Ensure storage meets minimum requirements
            storage_size: "50Gi"
            persistence:
              size: "50Gi"
          kafka:
            cluster_id: "test-app-data-lake"
            auto_create_topics: true
            log_retention_hours: 168
            # Use ClusterIP service to avoid port conflicts
            service:
              type: "ClusterIP"
            topics:
              - name: "test-app-data-ingestion"
                partitions: 6
                replication_factor: 1
          spark:
            history_server: true
            event_log_dir: "s3a://test-app-raw-data/spark-events"
            executor_memory: "4g"
            driver_memory: "2g"

  # Example Startup Tenant
  - name: "example-startup"
    git_org: "aryan-spanda"
    description: "Small startup with basic resource needs"
    cpu_quota: "20"
    memory_quota: "40Gi"
    storage_quota: "100Gi"
    gpu_quota: "1"
    environments: ["dev", "staging", "production"]
    modules: []  # No additional modules for this tenant
  # - name: "new-client"
  #   git_org: "new-client-org"
  #   description: "Description of the new client"
  #   cpu_quota: "10"
  #   memory_quota: "20Gi"
  #   storage_quota: "50Gi"
  #   environments: ["dev", "staging", "production"]

# =============================================================================
# TENANT DISCOVERY SETTINGS
# =============================================================================
# The onboarding script can also discover tenants from application repositories
# by scanning platform-requirements.yml files from application-sources.txt
discovery:
  enabled: true
  scan_application_repos: true
  default_quotas:
    cpu_quota: "15"
    memory_quota: "30Gi"
    storage_quota: "75Gi"
    gpu_quota: "0"
