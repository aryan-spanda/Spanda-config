#!/bin/bash

# =====================================================================
# Spanda Platform - ArgoCD Application Generator
# =====================================================================
# This script automatically generates ArgoCD application YAML files
# by reading platform-requirements.yml from application repositories.
#
# Usage: ./generate-argocd-applications.sh [repo-url] [repo-url] ...
# =====================================================================

set -e

echo "🚀 Spanda Platform - ArgoCD Application Generator"
echo "================================================="

# Check for yq dependency
if ! command -v yq &> /dev/null; then
    echo "❌ Error: yq is required but not installed."
    echo "Install it with:"
    echo "  # Windows (PowerShell):"
    echo "  Invoke-WebRequest -Uri https://github.com/mikefarah/yq/releases/latest/download/yq_windows_amd64.exe -OutFile yq.exe"
    echo "  # Linux:"
    echo "  curl -L https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o yq && chmod +x yq"
    echo "  # macOS:"
    echo "  brew install yq"
    exit 1
fi

# Configuration
CONFIG_REPO_ROOT="$(dirname "$(realpath "$0")")/.."
APPLICATIONS_DIR="$CONFIG_REPO_ROOT/applications"

# Function to generate ArgoCD applications for a single repository
generate_argocd_for_repo() {
    local repo_url="$1"
    local temp_dir=$(mktemp -d)
    
    echo "📥 Processing repository: $repo_url"
    
    # Clone the repository
    if ! git clone "$repo_url" "$temp_dir" --depth 1 --quiet 2>/dev/null; then
        echo "❌ Failed to clone $repo_url"
        rm -rf "$temp_dir"
        return 1
    fi
    
    # Check if platform-requirements.yml exists
    if [[ ! -f "$temp_dir/platform-requirements.yml" ]]; then
        echo "⏭️  No platform-requirements.yml found in $repo_url"
        rm -rf "$temp_dir"
        return 0
    fi
    
    echo "✅ Found platform-requirements.yml"
    
    # Extract application details
    APP_NAME=$(yq eval '.app.name' "$temp_dir/platform-requirements.yml")
    REPO_URL=$(yq eval '.app.repoURL' "$temp_dir/platform-requirements.yml")
    CHART_PATH=$(yq eval '.app.chartPath' "$temp_dir/platform-requirements.yml")
    
    if [[ "$APP_NAME" == "null" || -z "$APP_NAME" ]]; then
        echo "❌ Error: app.name is required in platform-requirements.yml"
        rm -rf "$temp_dir"
        return 1
    fi
    
    echo "  📦 App Name: $APP_NAME"
    echo "  📂 Chart Path: $CHART_PATH"
    
    # Create application directory
    APP_DIR="$APPLICATIONS_DIR/$APP_NAME/argocd"
    mkdir -p "$APP_DIR"
    
    # Read environments array
    ENVIRONMENTS=$(yq eval '.environments[]' "$temp_dir/platform-requirements.yml")
    
    if [[ -z "$ENVIRONMENTS" ]]; then
        echo "❌ Error: No environments specified in platform-requirements.yml"
        rm -rf "$temp_dir"
        return 1
    fi
    
    echo "  🌍 Environments: $(echo "$ENVIRONMENTS" | tr '\n' ' ')"
    
    # Generate ArgoCD application for each environment
    echo "$ENVIRONMENTS" | while read -r env; do
        [[ -z "$env" ]] && continue
        
        # Determine namespace based on environment
        local namespace
        case "$env" in
            "dev") namespace="development" ;;
            "staging") namespace="staging" ;;
            "prod"|"production") namespace="production" ;;
            *) namespace="$env" ;;
        esac
        
        # Determine sync policy (manual for production)
        local sync_policy
        if [[ "$env" == "prod" || "$env" == "production" ]]; then
            sync_policy="manual"
        else
            sync_policy="auto"
        fi
        
        echo "    🔄 Generating ArgoCD app for $env environment..."
        
        # Generate ArgoCD Application YAML
        cat > "$APP_DIR/app-$env.yaml" << EOF
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: $APP_NAME-$env
  namespace: argocd
  labels:
    app.kubernetes.io/name: $APP_NAME
    environment: $env
    app-type: auto-detected
  annotations:
    app.spanda.ai/generated: "true"
    app.spanda.ai/generator: "platform-automation"
    app.spanda.ai/generated-at: "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
spec:
  project: spanda-applications
  source:
    repoURL: $REPO_URL
    targetRevision: main
    path: $CHART_PATH
    helm:
      valueFiles:
        - values-$env.yaml
  destination:
    server: https://kubernetes.default.svc
    namespace: $namespace
  syncPolicy:$(if [[ "$sync_policy" == "auto" ]]; then echo "
    automated:
      selfHeal: true
      prune: true"; fi)
    syncOptions:
      - CreateNamespace=true
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  info:
    - name: 'Generated By'
      value: 'Platform Automation'
    - name: 'Source Repository'
      value: '$REPO_URL'
    - name: 'Chart Path'
      value: '$CHART_PATH'
    - name: 'Environment'
      value: '$env'
EOF
        
        echo "    ✅ Generated: $APP_DIR/app-$env.yaml"
    done
    
    # Create a README for the application
    cat > "$APP_DIR/../README.md" << EOF
# $APP_NAME - ArgoCD Applications

This directory contains ArgoCD application definitions for \`$APP_NAME\`.

## 📁 Structure
\`\`\`
applications/$APP_NAME/
├── README.md           # This file
└── argocd/            # ArgoCD application manifests
$(ls -1 "$APP_DIR" | sed 's/^/    ├── /')
\`\`\`

## 🚀 Deployment

### Apply ArgoCD Applications
\`\`\`bash
# Apply all environments
kubectl apply -f applications/$APP_NAME/argocd/

# Apply specific environment
kubectl apply -f applications/$APP_NAME/argocd/app-dev.yaml
\`\`\`

### Sync Applications
\`\`\`bash
# Sync all environments
$(echo "$ENVIRONMENTS" | while read -r env; do [[ -n "$env" ]] && echo "argocd app sync $APP_NAME-$env"; done)

# Sync specific environment
argocd app sync $APP_NAME-dev
\`\`\`

## 📋 Application Details

- **Repository**: $REPO_URL
- **Chart Path**: $CHART_PATH
- **Environments**: $(echo "$ENVIRONMENTS" | tr '\n' ' ')

## 🔄 Auto-Generated

These files were automatically generated from \`platform-requirements.yml\`.
To update, modify the platform requirements in the source repository and re-run:

\`\`\`bash
./scripts/generate-argocd-applications.sh $REPO_URL
\`\`\`
EOF
    
    echo "  📝 Generated README: $APP_DIR/../README.md"
    echo "  ✅ ArgoCD applications generated for $APP_NAME"
    
    rm -rf "$temp_dir"
}

# Main execution
if [[ $# -eq 0 ]]; then
    echo "📋 No repositories specified. Using default application repositories..."
    
    # Default repositories to scan
    REPOS=(
        "https://github.com/aryan-spanda/Test-Application.git"
        # Add more repositories here as they adopt platform-requirements.yml
    )
else
    # Use provided repositories
    REPOS=("$@")
fi

echo "🔍 Processing ${#REPOS[@]} repositories..."
echo ""

# Process each repository
for repo in "${REPOS[@]}"; do
    generate_argocd_for_repo "$repo"
    echo ""
done

echo "🎉 ArgoCD application generation complete!"
echo ""
echo "📁 Generated applications in: $APPLICATIONS_DIR"
echo ""
echo "🚀 Next steps:"
echo "1. Review the generated ArgoCD applications"
echo "2. Apply them to your cluster:"
echo "   kubectl apply -f $APPLICATIONS_DIR/*/argocd/"
echo "3. Check ArgoCD UI for application status"
echo ""
echo "💡 To add a new application:"
echo "1. Add platform-requirements.yml to your app repository"
echo "2. Run: ./scripts/generate-argocd-applications.sh <your-repo-url>"
